# Программа это набор инструкций которые описывают
# компьютеру определенную последовательность действий
# В свою очередь каждая инструкция обрабатывает или создает обьекты
# ТИПЫ В PYTHON (в Python все является объектом)
# Целое число это число не содерж дробной части ...,-7,-6,1,0,1,3,9...,

# ОПЕРАЦИИ НАД ЧИСЛАМИ ( + - * / ** возведение в степень //- целочисленное % остаток от деления)

print(5+6)      # результат это обьект типа   # int Складываются два объекта числа
print(4-2.0)    # результат это обьект типа   # float число с плавающей точкой 7.6 8.0
print(2*3)      # результат целое число
print(12/2)     # Вещественное 6.0
print(4**3)     # Возведение в степень Кого возводим в какую степень  ВОЗВЕДЕНИЕ В СТЕПЕНЬ Многократное увеличение числа на себя записывается **
print(2>2)      # результат это обьект типа   # boolS


# ДЕЛЕНИЕ НА ЦЕЛО !

print(11//2)    # Деление на цело сколько раз 5 умещается
print(10//10)   # 0

print(max(1,2,3,4,5,abs(-56)))          # применяется abs потом max


# ДЕЛЕНИЕ ПО МОДУЛЮ С ОСТАТКОМ
print(19%7, 'Остаток 5')# Сколько раз максимально 7 умещ в 19  ( 2 раза по 7 и того нужно прибавить 5)
print(2%7) # 0 раз по 7 ответом будет 2















h = 2 << 2;print(h) # 2 << 2 даст 8 . В двоичном виде 2 представляет собой 10 .Сдвиг влево на 2 бита даёт1000 , что в десятичном виде означает 8 .
i = 11 >> 1;print(i) # 11 >> 1 даст 5 . В двоичномвиде 11 представляется как1011 , что будучи смещённымна 1 бит вправо, даёт 101 , а это,в свою очередь, ни что иноекак десятичное 5

j = 5 & 3;print(j) #Побитовая операция И над числами            1
k = 5 | 3;print(k) # Побитовая операция ИЛИ над числами         7
l = 5 ^ 3;print(l)# Побитовая операцияИСКЛЮЧИТЕЛЬНО ИЛИ         6
m = ~5;print(m) #Побитовая операция НЕ для числа x соответствует -(x+1) ~5 даёт -6
n = 3<5;print(n) #True

o = 3>5;print(o) #False
p = 3<=3;print(p)#True
q = 3>=2;print(q) #True

r = 2==2;print(r) #True
s  = 2!=2;print(s)#False



print((9 > 7) and (2 < 4))  # Оба выражения истинны (True)           Логи-ческое И    Оператор and оценивает выражение как истинное только тогда, когда оба компонента истинны.
print((8 == 8) or (6 != 6)) # Одно из выражений истинно (True)       Логи-ческое  ИЛИ
print(not(3 <= 1))          # Выражение ложно (False)   значит True  Логи-ческое НЕ


print('{0:_^11} '.format('Никита'))


#